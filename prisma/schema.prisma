// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
  FREEZE
}

enum CommentStatus {
  APPROVE
  REJECT
}

enum Role {
  ADMIN
  USER
}

model Otp {
  id            Int      @id @default(autoincrement())
  phone         String   @unique
  count         Int      @db.SmallInt
  otp           String
  rememberToken String
  errorCount    Int      @default(0) @db.SmallInt
  verifyToken   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id              Int             @id @default(autoincrement())
  firstName       String?         @db.VarChar(52)
  lastName        String?         @db.VarChar(52)
  phone           String          @unique
  email           String?         @unique @db.VarChar(52)
  password        String
  refreshToken    String
  errorLoginCount Int             @default(0) @db.SmallInt
  status          Status          @default(ACTIVE)
  role            Role            @default(USER)
  image           String?
  posts           Post[]
  postReviews     PostReview[]
  productReviews  ProductReview[]
  likedProducts   Product[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(52)
  posts     Post[]
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Type {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(52)
  posts     Post[]
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PostTag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(52)
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(52)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Hero {
  id        Int      @id @default(autoincrement())
  title     String
  subTitle  String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         Int          @id @default(autoincrement())
  title      String
  content    String
  body       String
  image      String
  authorId   Int
  author     User         @relation(fields: [authorId], references: [id])
  categoryId Int
  category   Category     @relation(fields: [categoryId], references: [id])
  typeId     Int
  type       Type         @relation(fields: [typeId], references: [id])
  tags       PostTag[]
  reviews    PostReview[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model PostReview {
  id        Int           @id @default(autoincrement())
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  postId    Int
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   String
  rating    Int           @db.SmallInt
  status    CommentStatus @default(APPROVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  categoryId  Int
  category    Category        @relation(fields: [categoryId], references: [id])
  typeId      Int
  type        Type            @relation(fields: [typeId], references: [id])
  tags        ProductTag[]
  images      Image[]
  status      Status          @default(ACTIVE)
  likedUsers  User[]
  inventory   Int
  reviews     ProductReview[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProductReview {
  id        Int           @id @default(autoincrement())
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  productId Int
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int           @db.SmallInt
  comment   String
  status    CommentStatus @default(APPROVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
